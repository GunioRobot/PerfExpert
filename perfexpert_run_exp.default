#!/usr/bin/env bash

### Replace the following lines from the experiment.header file
#############################################################################################
#############################################################################################
___EXPERIMENT_HEADER___
#############################################################################################
#############################################################################################

#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX#
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX#

######## Do not edit anything below this line ########

#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX#
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX#

# Location of hpcrun, hpcstruct and hpcprof binaries 
main_location="${HOME}/.perfexpert/perfexpert.properties"
alt_location="/opt/apps/perfexpert/perfexpert.properties";

hpctoolkit_location=`(grep "^HPCTOOLKIT_LOCATION" "${main_location}" | sed -e 's/HPCTOOLKIT_LOCATION[\t ]*=[\t ]*\(.*\)/\1/') 2> /dev/null`

if [ "x${hpctoolkit_location}" == "x" ]
then
	# Check the home dir
	hpctoolkit_location=`(grep "^HPCTOOLKIT_LOCATION" "${alt_location}" | sed -e 's/HPCTOOLKIT_LOCATION[\t ]*=[\t ]*\(.*\)/\1/') 2> /dev/null`
	if [ "x${hpctoolkit_location}" == "x" ]
	then
		echo "Could not find HPCTOOLKIT_LOCATION specified in either \"${main_location}\" or \"${alt_location}\", exiting..."
		exit 1
	fi
fi

HPCTOOLKIT_BIN=${hpctoolkit_location}/bin

# Sanity checks
if [ ${#} -lt 1 ]
then
	echo "USAGE: ${0} [--structure hpcstruct-file] program-name [arguments]"
	exit 1;
fi

hpcstruct_file="";
if [ ${1} = "--structure" ]
then
	hpcstruct_file=${2};
	if [ ${#} -lt 3 ]
	then
		echo "USAGE: ${0} [--structure hpcstruct-file] program-name [arguments]"
		exit 1;
	fi

	if [ ! -f ${hpcstruct_file} ]
	then
		echo "Could not find hpc struct file: ${hpcstruct_file}, try entering the absolute path";
		exit 1;
	fi

	shift; shift;
fi;

program_name=${1};

arguments="";
shift;
if [ "x${*}" != "x" ]
then
	arguments=${*};
fi;

if [ ! -f ${program_name} ]
then
	echo "Could not find file: ${program_name}, try entering the absolute path";
	exit 1;
fi

# Put everything into a temporary directory instead of clobbering the working directory
tempDir=`mktemp -d .perfexpert-temp-XXXXXXX`;

# Just to be sure, we remove any files which might previously exist
rm -rf ${tempDir}/*;

# Check if we received the HPCStruct file as a parameter
if [ "x${hpcstruct_file}" != "x" ]
then
	# If yes, use it
	cp ${hpcstruct_file} ${tempDir}/hpcstruct;
else
	# Else generate it
	${HPCTOOLKIT_BIN}/hpcstruct --output ${tempDir}/hpcstruct ${program_name};
fi

# Run experiments with different configurations
for index in $(seq 0 $((${#experiment[@]}-1)))
do
	cmd="${HPCTOOLKIT_BIN}/hpcrun ${experiment[${index}]} --output ${tempDir}/measurements ${program_name} ${arguments}";
	eval ${cmd};
done

${HPCTOOLKIT_BIN}/hpcprof --force-metric --metric=thread --struct ${tempDir}/hpcstruct --output ${tempDir}/database ${tempDir}/measurements;

# Get the final experiment.xml here
mv ${tempDir}/database/experiment.xml ./experiment-$JOB_NAME.o$JOB_ID.xml

# Clean up
rm -rf ${tempDir};
rm -f core;

echo
echo "Run the following command to analyze the measurement data:"
echo "perfexpert <threshold-between-0-and-1> ./experiment-$JOB_NAME.o$JOB_ID.xml"
