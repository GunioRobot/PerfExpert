#!/usr/bin/env bash

### Replace the following lines from the experiment.header file
#############################################################################################
#############################################################################################
___EXPERIMENT_HEADER___
#############################################################################################
#############################################################################################

#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX#
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX#

######## Do not edit anything below this line ########

#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX#
#XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX#

hpctoolkit_location=${PERFEXPERT_HPCTOOLKIT_HOME}

if [ "x${hpctoolkit_location}" == "x" ]
then
	echo "Could not find PERFEXPERT_HPCTOOLKIT_HOME defined as an environment variable, exiting..."
	exit 1
fi

HPCTOOLKIT_BIN=${hpctoolkit_location}/bin

for arg
do
	delim=""
	case "$arg" in
		# translate GNU long options to short options
		--structure)	args="${args}-s ";;
		--output)	args="${args}-o ";;

		# pass through anything else
		*) [[ "${arg:0:1}" == "-" ]] || delim="\""
		args="${args}${delim}${arg}${delim} ";;
	esac
done

# Reset the positional parameters to the short options
eval set -- $args

structure=""
structureSet=false

# Generate output filename
output_filename="experiment-${JOB_NAME}.o${JOB_ID}.xml"
if [ "x${JOB_NAME}" == "x" ]
then
	output_filename="experiment.xml"
fi

while getopts ":s:o:" option 2>/dev/null
do
	case $option in
		s)
		structure="${OPTARG[@]}"
		structureSet=true
		;;

		o)
		output_filename="${OPTARG[@]}"
		;;

		*)
		echo "Unrecognized option: ${OPTARG}"
		exit 1
		;;
	esac
done
shift $(($OPTIND - 1))

command=${*}

# Sanity checks
if [ ${#} -lt 1 ]
then
	echo "Usage: `basename ${0}` [OPTION...] program-name [arguments]"
	echo "Program to gather measurements for use with PerfExpert"
	echo
	echo -e "  -s, --structure FILE\t\tUse FILE.hpcstruct as program structure (generated by hpcstruct)"
	echo -e "  -o, --output FILE.xml\t\tSave measurements to FILE.xml"

	exit 1;
fi

if [ "${structureSet}" == "true" ]
then
	hpcstruct_file=${structure};
	if [ ! -f ${hpcstruct_file} ]
	then
		echo "Could not find hpcstruct file: ${hpcstruct_file}, try entering the absolute path";
		exit 1;
	fi

	echo "PerfExpert: Using existing structure file: ${hpcstruct_file}"
fi;

program_name=${1};

arguments="";
shift;
if [ "x${*}" != "x" ]
then
	arguments=${*};
fi;

# If it is in ${PATH}, form the absolute path
fullPath=`which ${program_name} 2>/dev/null`
if [ ${?} -ne 0 ]
then
	# Try checking if the file is in the current directory
	if [ -x ./${program_name} ]
	then
		fullPath=./${program_name}
	else
		# Instead of raising an error, use the program name as it is
		fullPath=${program_name}
	fi
fi

# Set the original variable back
program_name=${fullPath}

if [ ! -f ${program_name} ]
then
	echo "Could not run file: ${program_name}, try entering the absolute path";
	exit 1;
fi

# Put everything into a temporary directory instead of clobbering the working directory
tempDir=`mktemp -d .perfexpert-temp-XXXXXXX`;

# If for some reason tempDir was not set, set it to a default
if [ "x${tempDir}" == "x" ]
then
        tempDir=".perfexpert-temp"
        mkdir "${tempDir}"
fi

# Just to be sure, we remove any files which might previously exist
rm -rf ${tempDir}/*;

# Check if we received the HPCStruct file as a parameter
if [ "x${hpcstruct_file}" != "x" ]
then
	# If yes, use it
	cp ${hpcstruct_file} ${tempDir}/hpcstruct;
else
	# Else generate it
	echo -n "PerfExpert: Generating program structure using hpcstruct..."
	${HPCTOOLKIT_BIN}/hpcstruct --output ${tempDir}/hpcstruct ${program_name};
	echo "done!"
fi

# Run experiments with different configurations
for index in $(seq 0 $((${#experiment[@]}-1)))
do
	echo
	echo "PerfExpert: Program execution #$((${index}+1)) of ${#experiment[@]}"
	cmd="${HPCTOOLKIT_BIN}/hpcrun ${experiment[${index}]} --output ${tempDir}/measurements ${program_name} ${arguments}";
	eval ${cmd};
done

echo
echo -n "PerfExpert: Finished all measurements, summarizing the results..."
${HPCTOOLKIT_BIN}/hpcprof --force-metric --metric=thread --struct ${tempDir}/hpcstruct --output ${tempDir}/database ${tempDir}/measurements &> ${tempDir}/hpcprof.message
cat ${tempDir}/hpcprof.message >> perfexpert.log

echo "done!"

# Get the final experiment.xml here
mv ${tempDir}/database/experiment.xml ./${output_filename}

# Clean up
rm -rf ${tempDir};
rm -f core;

echo "PerfExpert: Run the following command to analyze the measurement data:"
echo "perfexpert <threshold-between-0-and-1> ./${output_filename}"
